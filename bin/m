#!/usr/bin/env python3

# m
#
# MPDDP, MPDSPL, NMPC, and MPD interface

import sys, subprocess, os

mpdsplargs = ""

mpaths = {"rc.d"   : "/etc/rc.d/mpd",
          "mpddp"  : "mpddp",
          "mpdspl" : "mpdspl",
          "nmpc"   : "nmpc"}

def badcmd (cmd):
    print ("Bad command", cmd)
    sys.exit (1)

def execute (argvector):
    command = ""
    
    if type(argvector) is list:
        for arg in argvector:
            command = command + str (arg) + " "
    else:
        command = argvector
        
    os.system (command)

def showhelp ():
    print ("m - MPDDP, MPDSPL, NMPC, and MPD interface\n")
    
    print ("Usage: m [cmd1] ... [cmdn]\n")
    
    print ("Commands:")
    print ("    p[args] - MPDDP commands")
    print ("        s - Start")
    print ("        S - Stop")
    print ("        r - Restart")
    print ("        R - Reconfigure\n")
    
    print ("    s[args] - MPDSPL commands")
    print ("        n:name:rules - Create new playlist and save")
    print ("        s:rules      - Create new playlist and print track list\n")
    
    print ("    n[args] - NMPC commands")
    print ("        n      - Next")
    print ("        p      - Previous")
    print ("        t      - Toggle Play/Pause")
    print ("        s      - Stop")
    print ("        S      - Shuffle")
    print ("        c      - Clear")
    print ("        r      - Repeat")
    print ("        R      - Random")
    print ("        i      - Info")
    print ("        I      - Playing info")
    print ("        P      - Playlists")
    print ("        l:name - Load playlist")
    print ("        u      - Update\n")
    
    print ("    m[args] - MPD commands")
    print ("        s - Start")
    print ("        S - Stop")
    print ("        r - Restart\n")
    
    print ("To pass extra parameters to MPDSPL, check the mpdsplargs variable.")
    print ("To specify the location of any commands/scripts, check the mpaths variable.")
    print ("As many commands from the same group can be used together as desired, however")
    print ("a command with arguments must be the last command in the string.\n")
    
    print ("Examples:")
    print ("    m pS nc pRr      - Stop MPDDP, clear the playlist, edit the MPDDP config, and restart MPDDP.")
    print ("    m nul:Favourites - Update the database and load the Favourites playlist.")

def mpddpcmd (cmd):
    global mpaths
    
    for blit in cmd:
        if blit == "s" or blit == "r":
            execute (mpaths["mpddp"])
        elif blit == "S":
            execute ([mpaths["mpddp"] ,"kill"])
        elif blit == "R":
            execute ([os.getenv ("EDITOR"), os.getenv("XDG_CONFIG_HOME") + "/mpddp/config"])
        else:
            badcmd (cmd)

def mpdsplcmd (cmd):
    global mpaths
    global mpdsplargs
    
    name  = ""
    rules = ""
    
    if cmd[0] == "n":
        for i in range (2, len (cmd)):
            if cmd[i] == ":":
                if name == "":
                    name  = cmd[2:i]
                    rules = "\"" + cmd[i:] + "\""
        execute ([mpaths["mpdspl"], mpdsplargs, "-n", name, rules])
    elif cmd[0] == "s":
        rules = "\"" + cmd[2:] + "\""
        execute ([mpaths["mpdspl"], mpdsplargs, "-s", "-n", "a", rules])
    else:
        badcmd (cmd)
        

def nmpccmd (cmd):
    global mpaths
    
    done = False
    for blit in cmd:
        if not done:
            if blit == "n":
                execute ([mpaths["nmpc"], "next"])
            elif blit == "p":
                execute ([mpaths["nmpc"], "previous"])
            elif blit == "t":
                execute ([mpaths["nmpc"], "toggle"])
            elif blit == "s":
                execute ([mpaths["nmpc"], "stop"])
            elif blit == "S":
                execute ([mpaths["nmpc"], "shuffle"])
            elif blit == "c":
                execute ([mpaths["nmpc"], "clear"])
            elif blit == "r":
                execute ([mpaths["nmpc"], "repeat"])
            elif blit == "R":
                execute ([mpaths["nmpc"], "random"])
            elif blit == "i":
                execute ([mpaths["nmpc"], "info"])
            elif blit == "I":
                execute ([mpaths["nmpc"], "playing"])
            elif blit == "P":
                execute ([mpaths["nmpc"], "playlists"])
            elif blit == "l":
                name = cmd[cmd.find(":") + 1:]
                execute ([mpaths["nmpc"], "playlist", name])
                done = True
            elif blit == "u":
                execute ([mpaths["nmpc"], "update"])
            else:
                badcmd (cmd)

def mpdcmd (cmd):
    global mpaths
    
    for blit in cmd:
        if blit == "s":
            execite ([mpaths["rc.d"], "start"])
        elif blit == "S":
            execite ([mpaths["rc.d"], "stop"])
        elif blit == "r":
            execite ([mpaths["rc.d"], "restart"])
        else:
            badcmd (cmd)

def parsearg (arg):
    if arg[0] == "p":
        mpddpcmd (arg[1:])
    elif arg[0] == "s":
        mpdsplcmd (arg[1:])
    elif arg[0] == "n":
        nmpccmd (arg[1:])
    elif arg[0] == "m":
        mpdcmd (arg[1:])
    else:
        badcmd (arg)

if len (sys.argv) > 1:
    for arg in sys.argv:
        if not arg == sys.argv[0]:
            parsearg (arg)
else:
    showhelp ()
