#!/bin/zsh

LIVECDDIR=$1
VERBOSE=/bin/false
REPOS=(core)
START=`pwd`

if [[ "$2" == "-v" ]]; then
    VERBOSE=/bin/true
fi

export LIVECDDIR
export VERBOSE
export REPOS
export START

## Colours
autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='$terminfo[bold]$fg[${(L)color}]'
    eval PR_LIGHT_$color='$fg[${(L)color}]'
    
    export PR_$color
    export PR_LIGHT_$color
done
export PR_NO_COLOR="$terminfo[sgr0]"

function showmsg()
{
    echo "${PR_GREEN}==> ${PR_NO_COLOR}${PR_LIGHT_GREEN}$1${PR_NO_COLOR}"
}

function showerr()
{
    echo "${PR_RED}==> ${PR_NO_COLOR}${PR_LIGHT_RED}$1${PR_NO_COLOR}"
    exit 1
}

function runcmd()
{
    err=$1
    shift

    if $VERBOSE; then
        $@ || showerr $err
    else
        $@ &>/dev/null || showerr $err
    fi
}

mkdir -p $LIVECDDIR/livecd
cd $LIVECDDIR

##### SYNC PACKAGES

mkdir -p $LIVECDDIR/livecd/arch/paccache

for repo in $REPOS; do
    showmsg "Downloading contents of $repo..."
    runcmd "Could not synchronise packages in $repo." rsync -avz archhurd.org::repos/$repo .
    cp -a $repo $LIVECDDIR/livecd/arch/paccache
done

##### INSTALL PACKAGES & INITSCRIPTS

showmsg "Installing packages..."

mkdir -p livecd/var/lib/pacman/
mkdir -p livecd/var/log/

echo "[options]
RootDir     = ${LIVECDDIR}/livecd/
DBPath      = ${LIVECDDIR}/livecd/var/lib/pacman/
CacheDir    = ${LIVECDDIR}/livecd/arch/paccache/core/
LogFile     = ${LIVECDDIR}/livecd/var/log/pacman.log
[core]
Server = file://${LIVECDDIR}/livecd/arch/paccache/core" > pacman.conf

runcmd "Could not install packages." fakeroot pacman --config pacman.conf -Sy base --noconfirm

echo "[options]
RootDir     = /mnt/
DBPath      = /mnt/var/lib/pacman/
CacheDir    = /mnt/var/cache/pacman/pkg/
LogFile     = /mnt/var/log/pacman.log" > $LIVECDDIR/livecd/etc/pacman-mnt.conf

for repo in $REPOS; do
    echo "[${repo}]
Server = file:///arch/paccache/$repo" >> $LIVECDDIR/livecd/etc/pacman-mnt.conf
done

mkdir -p initscripts
pushd
runcmd "" git init
runcmd "Could not pull initscripts.git." git pull git://archhurd.org/initscripts.git livecd

export DESTDIR=$LIVECDDIR/livecd
runcmd "Could not install initscripts." ./install.sh
popd

##### SETUP

showmsg "Installing setup script"

mkdir -p setup
pushd setup/
runcmd "" git init
runcmd "Could not pull setup.git." git pull git://archhurd.org/setup.git master
runcmd "Could not install setup."  cp * ${LIVECDDIR}/livecd/arch/
popd

##### BUILD LIVECD

showmsg "Building LiveCD..."

runcmd "Failed to copy GRUB files." cp ${LIVECDDIR}/livecd/lib/grub/i386-pc/stage2_eltorito ${LIVECDDIR}/livecd/boot/grub/

echo "timeout   300
default   0
color light-blue/black light-cyan/blue

title Arch Hurd (hit 'e' and edit hd2 to be the device your CD/DVD is)
root (cd)
kernel /boot/gnumach root=device:hd2
module /hurd/iso9660fs.static --multiboot-command-line=\${kernel-command-line} --host-priv-port=\${host-port} --device-master-port=\${device-port} --exec-server-task=\${exec-task} -T typed \${root} \$(task-create) \$(task-resume)
module /lib/ld-2.11.90.so /hurd/exec \$(exec-task=task-create)" > $LIVECDDIR/livecd/boot/grub/menu.lst

runcmd "Failed to build ISO file." mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot -boot-load-size 4 -boot-info-table -V "Arch Hurd" -o ahurd.iso $LIVECDDIR/livecd

showmsg "Done. ISO built as ${LIVECDDIR}/ahurd.iso."

cd $START