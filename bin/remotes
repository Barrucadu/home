#!/bin/zsh

# This is a config file containing an array of remotes to mount
# Format: SHARES=(mountpoint:user:host:remotepath:port ...)
# Example: SHARES=(media:barrucadu:eihort:/media:22 share:barrucadu:eihort:/share:22)
. $XDG_CONFIG_HOME/remotes/config

# Check if a remote is mounted
# ARGUMENTS: mountpoint, remote
function mounted ()
{
    mountpoint=$1
    remote=$2

    mount | grep -q "$remote on $mountpoint"
}

# Mount a remote
# ARGUMENTS: mountpoint, remote, port
function domount ()
{
    mountpoint=$1
    remote=$2
    port=$3

    sshfs -C -p $port $remote $mountpoint -o ServerAliveInterval=120
}

# Unmount a remote
#ARGUMENTS: mountpoint
function doumount ()
{
    mountpoint=$1

    fusermount -u $mountpoint
}

if [[ $1 == "help" ]] || [[ $1 == "" ]]; then
    echo "USAGE: remotes <command> <remote>"
    echo
    echo "Commands:"
    echo "    list   - List all remotes, indicating which are mounted"
    echo "    mount  - Mount the specified remote (if not already mounted)"
    echo "    umount - Unmount the specified remote (if mounted)"
    echo "    all    - Mount all unmounted remotes"
    echo "    none   - Unmount all mounted remotes"
    echo
    echo " ~ Michael Walker <mike@barrucadu.co.uk>"
else
    action=$1
    for share in $SHARES; do
        mount=`echo $share | sed 's/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\1/'`
        ruser=`echo $share | sed 's/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\2/'`
        rhost=`echo $share | sed 's/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\3/'`
        rpath=`echo $share | sed 's/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\4/'`
        rport=`echo $share | sed 's/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\5/'`

        name=$rhost-$mount
        mountpoint=/share/$rhost/$mount
        remote=$ruser@$rhost:$rpath

        if [[ $action == "list" ]]; then
            # List all remotes
            if `mounted $mountpoint $remote`; then
                echo "[MOUNTED] $remote:$rport on $mountpoint ($name)"
            else
                echo "          $remote:$rport on $mountpoint ($name)"
            fi

        elif [[ $action == "mount" ]]; then
            # Mount the remote
            if [[ $2 == $name ]] && ! `mounted $mountpoint $remote`; then
                domount $mountpoint $remote $rport
            fi

        elif [[ $action == "umount" ]]; then
            # Unmount the remote
            if [[ $2 == $name ]] && `mounted $mountpoint $remote`; then
                doumount $mountpoint
            fi

        elif [[ $action == "all" ]]; then
            # Mount all unmounted remotes
            if ! `mounted $mountpoint $remote`; then
                domount $mountpoint $remote $rport
            fi

        elif [[ $action == "none" ]]; then
            # Unmount all mounted remotes
            if `mounted $mountpoint $remote`; then
                doumount $mountpoint
            fi
        fi
    done
fi