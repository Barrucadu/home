#!/bin/zsh

# hashdir - recursively generate hashes for files in a directory structure.

HASHTYPE="sha1"
HASHFILE="files.$HASHTYPE"

function gethash()
{
    file=$1
    hashfunc="${HASHTYPE}sum"

    [ -e $file ] && $hashfunc $file | sed 's: .*::'
}

function gettype()
{
    file=$1

    if file $file | grep -q "symbolic link"; then
        if [[ -f $file ]]; then
            return 0
        else
            return 1
        fi
    else
        if [[ -f $file ]]; then
            return 2
        else
            return 3
        fi
    fi
}

function checkhash()
{
    file=$1
    hash=$2
    hashcheck=$3

    if [ -e $HASHFILE ]; then
        if ! grep -q " $file" $HASHFILE; then
            return 1
        elif $hashcheck && ! grep -q "$hash $file" $HASHFILE; then
            return 2
        fi
    fi

    return 0
}

function hashdir()
{
    fulldir=$1/$2
    dir=$2
    recursive=$3
    create=$4
    update=$5
    dirlink=$6
    filelink=$7
    verbose=$8

    ret=0
    type=0

    if $verbose; then
        echo "Entering $1"
    fi

    pushd $dir
    if $create && [[ -e $HASHFILE ]]; then
        rm $HASHFILE
    fi

    for file in *; do
        gettype $file
        type=$?

        if [[ "$file" != "$HASHFILE" ]]; then
            if $filelink && [[ "$type" == "0" ]] || [[ "$type" == "2" ]]; then
                if $update; then
                    checkhash $file "" false
                    chash=$?
                    if [[ ! -e $HASHFILE ]] || [[ "$chash" == "1" ]]; then
                        echo "=> Hash for $fulldir/$file not found, adding..."
                        hash=`gethash $file`
                        echo "$hash $file" >> $HASHFILE
                    fi
                else
                    if $verbose; then
                        echo "Hashchecking $file"
                    fi
                    hash=`gethash $file`
                    if $create; then
                        echo "$hash $file" >> $HASHFILE
                    else
                        checkhash $file $hash true
                        chash=$?
                        if [[ ! -e $HASHFILE ]] || [[ "$chash" == "1" ]]; then
                            echo "=> Hash for $fulldir/$file not found."
                            ret=1
                        elif [[ "$chash" == "2" ]]; then
                            echo "=> Hash for $fulldir/$file does not match."
                            ret=1
                        fi
                    fi
                fi
            elif $recursive && $dirlink && [[ "$type" == "1" ]] || $recursive && [[ "$type" == "3" ]]; then
                hashdir $1/$file $file $recursive $create $update $dirlink $filelink $verbose $fullpath/$file
                ret2=$?
                if [[ $ret2 > $ret ]]; then
                    ret=$ret2
                fi
            else
                if $verbose; then
                    echo "Ignoring $file"
                fi
            fi
        fi
    done
    popd

    return $ret
}

function help()
{
    echo "hashdir [-r] [-c] [-u] [-U] [-l] [-L] [-v] <directory>"
    echo
    echo "Parameters:"
    echo "    -r: Recursively descend into subdirectories."
    echo "    -c: Create the hashes (default to check them)."
    echo "    -u: Update the hash list by adding hashes for new files."
    echo "    -l: Follow directory symlinks."
    echo "    -L: Follow file symlinks."
    echo "    -v: Be verbose."
    echo
    echo "Notes:"
    echo "    WHen -u is given, files with existing hashes are not checked."
}

recursive=false
create=false
update=false
dirlink=false
filelink=false
verbose=false
dirs=()

for arg in $*; do
    case $arg in
        "--help") help && return 0;;

        "-r") recursive=true;;
        "-c") create=true;;
        "-u") update=true;;
        "-l") dirlinke=true;;
        "-L") filelink=true;;
        "-v") verbose=true;;

        *)    dirs+=$arg;;
    esac
done

if [[ ! -d "$dirs[1]" ]]; then
    help
    return 0
fi

for dir in $dirs; do
    if [[ -d "$dir" ]]; then
        hashdir $dir $dir $recursive $create $update $dirlink $filelink $verbose
    fi
done
