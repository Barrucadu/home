#!/bin/zsh

# A part of the moviedb set of scripts - for checking and repairing the database

help()
{
    echo "moviedb-fsck: A tool to check and repair the filesystem database."
    echo
    echo "Usage: moviedb-fsck"
    echo
    echo "Return codes:"
    echo "    1 = All errors found were fixed."
    echo "    2 = Errors found were not fixed."
    echo "    3 = Missing movie folder(s)."
}

# Strip the video extension from files
stripext()
{
    fname=$1
    case $fname in
        *.avi)
            echo $(basename $fname ".avi");;
        *.mkv)
            echo $(basename $fname ".mkv");;
        *.ogm)
            echo $(basename $fname ".ogm");;
        *.mp4)
            echo $(basename $fname ".mp4");;
    esac
}

# Check for non-directories and empty directories, deleting or ignoring them.
checkdirs()
{
    dir=$1
    ret=0

    pushd $dir
    for subdir in *; do
        answer=""

        if [[ ! -d "$subdir" ]]; then
            if [[ $ret == 0 ]]; then
                ret=1
            fi

            while [[ "$answer" != "d" ]] && [[ "$answer" != "i" ]]; do
                echo -n "$dir/$subdir is not a directory, delete or ignore? [di] "
                read answer
            done

            case "$answer" in
                "d")
                    rm "$dir/$subdir";;
                "i")
                    ret=2;;
            esac
        elif [[ "`ls "$subdir" | wc -l`" == "0" ]]; then
            if [[ $ret == 0 ]]; then
                ret=1
            fi

            while [[ "$answer" != "d" ]] && [[ "$answer" != "i" ]]; do
                echo -n "$dir/$subdir is empty, delete or ignore? [di] "
                read answer
            done

            case "$answer" in
                "d")
                    rmdir "$dir/$subdir";;
                "i")
                    ret=2;;
            esac
        fi
    done
    popd

    return $ret
}

# Check for broken and non-relative symbolic links
checklinks()
{
    dir=$1
    ret=0

    pushd $dir
    for subdir in *; do
        pushd $subdir
        for link in *; do
            answer=""

            if file $link | grep -q -v symbolic; then
                if [[ $ret == 0 ]]; then
                    ret=1
                fi
                
                while [[ "$answer" != "d" ]] && [[ "$answer" != "i" ]]; do
                    echo -n "$dir/$subdir/$link is not a symbolic link, delete or ignore? [di] "
                    read answer
                done
                
                case "$answer" in
                    "d")
                        rm "$dir/$subdir/$link";;
                    "i")
                        ret=2;;
                esac
            elif file $link | grep -q "broken symbolic"; then
                if [[ $ret == 0 ]]; then
                    ret=1
                fi
                
                while [[ "$answer" != "d" ]] && [[ "$answer" != "i" ]] && [[ "$answer" != "f" ]]; do
                    echo -n "$dir/$subdir/$link is a broken symbolic link, delete, fix or ignore? [dfi] "
                    read answer
                done
                
                case "$answer" in
                    "d")
                        rm "$dir/$subdir/$link";;
                    "f")
                        blink=`stripext $link`
                        file=`moviedb query file "$blink" | sed 's:.*/by-director:../../by-director:'`
                        if [[ -f $file ]]; then
                            rm $link
                            ln -s $file $link
                        else
                            echo "Could not repair automatically, fix manually."
                            ret=2
                        fi;;
                    "i")
                        ret=2;;
                esac
            elif file $link | grep -q -v "../../by-director"; then
                if [[ $ret == 0 ]]; then
                    ret=1
                fi
                
                while [[ "$answer" != "d" ]] && [[ "$answer" != "i" ]] && [[ "$answer" != "f" ]]; do
                    echo -n "$dir/$subdir/$link is a non-relative symbolic link, delete, fix or ignore? [dfi] "
                    read answer
                done
                
                case "$answer" in
                    "d")
                        rm "$dir/$subdir/$link";;
                    "f")
                        blink=`stripext $link`
                        file=`moviedb query file "$blink" | sed 's:.*/by-director:../../by-director:'`
                        if [[ -f $file ]]; then
                            rm $link
                            ln -s $file $link
                        else
                            echo "Could not repair automatically, fix manually."
                            ret=2
                        fi;;
                    "i")
                        ret=2;;
                esac
            fi
        done
        popd
    done
    popd

    return $ret
}

if [[ "$1" == "help" ]]; then
    help
    return 0
fi

if [[ -d $MOVIEPATH/by-director ]] && [[ -d $MOVIEPATH/by-genre ]]; then
    retcode=0

    # Check by-director hierarchy
    checkdirs $MOVIEPATH/by-director

    out=$?
    if [[ $out > $retcode ]]; then
        retcode=$out
    fi

    # Check by-genre hierarchy
    checkdirs $MOVIEPATH/by-genre

    out=$?
    if [[ $out > $retcode ]]; then
        retcode=$out
    fi

    checklinks $MOVIEPATH/by-genre

    out=$?
    if [[ $out > $retcode ]]; then
        retcode=$out
    fi

    # Check by-year hierarchy
    checkdirs $MOVIEPATH/by-year

    out=$?
    if [[ $out > $retcode ]]; then
        retcode=$out
    fi

    checklinks $MOVIEPATH/by-year

    out=$?
    if [[ $out > $retcode ]]; then
        retcode=$out
    fi

    return $retcode
else
    echo "\$MOVIEPATH = $MOVIEPATH"
    echo "\$MOVIEPATH/by-director or \$MOVIEPATH/by-genre does not appear to exist."
    return 3
fi
