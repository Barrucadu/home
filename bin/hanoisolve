#!/usr/bin/env python3

import sys

debug     = ("debug" in sys.argv)
movesonly = ("moves" in sys.argv)
maxmoves  = 0

# Towers of Hanoi solver.

def findsmallest(towers):
    if len(towers[0]) > 0 and towers[0][0] == 0:
        return 0
    elif len(towers[1]) > 0 and towers[1][0] == 0:
        return 1
    elif len(towers[2]) > 0 and towers[2][0] == 0:
        return 2

def findmove(towers):
    smallest = findsmallest(towers)
    a = 1
    b = 2
    if smallest == 1:
        a = 0
        b = 2
    elif smallest == 2:
        a = 0
        b = 1

    if len(towers[b]) == 0 or (len(towers[a]) > 0 and towers[a][0] < towers[b][0]):
        return a, b
    else:
        return b, a


def move(move, source, destination, towers):
    global debug
    global maxmoves

    extra = ''
    if debug:
        extra = towers

    print(str(move).rjust(len(str(maxmoves)), "0") + ": Move piece from tower", source, "to tower", destination, extra)

    piece = towers[source][0]
    towers[source].remove(piece)
    towers[destination].insert(0, piece)
    
    return towers

def solve(towers):
    global movesonly
    global maxmoves
    
    maxmoves = 2 ** len(towers[0]) - 1

    print("The minimum number of moves is", maxmoves)

    if movesonly:
        sys.exit()
        
    direction = (len(towers[0]) % 2 == 0)
    moves     = 1
    
    while len(towers[0]) > 0 or len(towers[1]) > 0:
        smalltower = findsmallest(towers)
        
        newtower = smalltower
        if direction:
            newtower += 1
        else:
            newtower -= 1

        if newtower > 2:
            newtower = 0
        elif newtower < 0:
            newtower = 2
            
        towers = move(moves, smalltower, newtower, towers)
        moves += 1

        if len(towers[0]) > 0 or len(towers[1]) > 0:
            starttower, endtower = findmove(towers)
            towers = move(moves, starttower, endtower, towers)
            moves += 1

if len(sys.argv) > 1:
    discs  = int(sys.argv[1])
    towers = [[], [], []]
    
    if discs > 0:
        for x in range(0, discs):
            towers[0].append(x)
        solve(towers)
    else:
        print("Don't be silly.")
else:
    print("Don't be silly.")
