#!/bin/zsh

VERBOSE=/bin/false

## Colours
autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='$terminfo[bold]$fg[${(L)color}]'
    eval PR_LIGHT_$color='$fg[${(L)color}]'

    export PR_$color
    export PR_LIGHT_$color
done
export PR_NO_COLOR="$terminfo[sgr0]"

function showmsg()
{
    echo "${PR_GREEN}==> ${PR_NO_COLOR}${PR_LIGHT_GREEN}$1${PR_NO_COLOR}"
}

function showerr()
{
    echo "${PR_RED}==> ${PR_NO_COLOR}${PR_LIGHT_RED}$1${PR_NO_COLOR}"
    exit 1
}


function shownote()
{
    echo "${PR_YELLOW}> ${PR_NO_COLOR}$1"
}

function runcmd()
{
    err=$1
    shift

    if $VERBOSE; then
        $@ || showerr $err
    else
        $@ &>/dev/null || showerr $err
    fi
}

function livecd()
{
    LIVECDDIR=$1
    REPOS=(core)

    mkdir -p $LIVECDDIR/livecd
    cd $LIVECDDIR

    ##### SYNC PACKAGES

    mkdir -p $LIVECDDIR/livecd/arch/paccache

    for repo in $REPOS; do
        showmsg "Downloading contents of $repo..."
        runcmd "Could not synchronise packages in $repo." rsync -avz --delete archhurd.org::repos/$repo .
        cp -a $repo $LIVECDDIR/livecd/arch/paccache
    done

    ##### INSTALL PACKAGES & INITSCRIPTS

    showmsg "Installing packages..."

    mkdir -p livecd/var/lib/pacman/
    mkdir -p livecd/var/log/

    echo "[options]
RootDir     = ${LIVECDDIR}/livecd/
DBPath      = ${LIVECDDIR}/livecd/var/lib/pacman/
CacheDir    = ${LIVECDDIR}/livecd/arch/paccache/core/
LogFile     = ${LIVECDDIR}/livecd/var/log/pacman.log

[core]
Server = file://${LIVECDDIR}/livecd/arch/paccache/core

[extra]
Server = http://files.archhurd.org/repo/extra
" > pacman.conf

    # base:   required for booting
    # dialog: required for installer
    runcmd "Could not install packages." fakeroot pacman --config pacman.conf -Sy base dialog memtest86+ --noconfirm

    echo "[options]
RootDir     = /mnt/
DBPath      = /mnt/var/lib/pacman/
CacheDir    = /mnt/var/cache/pacman/pkg/
LogFile     = /mnt/var/log/pacman.log" > $LIVECDDIR/livecd/etc/pacman-mnt.conf

    for repo in $REPOS; do
        echo "[${repo}]
Server = file:///arch/paccache/$repo" >> $LIVECDDIR/livecd/etc/pacman-mnt.conf
    done

    if [[ -d initscripts ]]; then
        pushd initscripts/
        runcmd "Could not pull initscripts.git." git checkout livecd
        runcmd "Could not pull initscripts.git." git pull origin livecd
    else
        runcmd "Could not pull initscripts.git." git clone --branch=livecd git://archhurd.org/initscripts.git
        pushd initscripts/
    fi

    export DESTDIR=$LIVECDDIR/livecd
    runcmd "Could not install initscripts." ./install.sh
    popd

    ##### SETUP

    showmsg "Installing setup script"

    if [[ -d setup ]]; then
        pushd setup
        runcmd "Could not pull setup.git." git pull origin
    else
        runcmd "Could not pull setup.git." git clone git://archhurd.org/setup.git
        pushd setup/
    fi

    runcmd "Could not install setup."  cp * ${LIVECDDIR}/livecd/arch/
    popd

    ##### BUILD LIVECD

    showmsg "Building LiveCD..."

    echo "Welcome to Arch Hurd.

If you have never used the Hurd before, do not fear! Superficially, they are
very similar systems and so much of your existing Linux knowledge will be
applicable.

Some useful commands for this livecd include:
    /arch/setup
        - start the installer
    less /arch/guide
        - read the installation guide
    less /arch/translators
        - read a short intro to translators

Happy Hurding!" > ${LIVECDDIR}/livecd/etc/motd

    runcmd "Failed to copy GRUB files." cp ${LIVECDDIR}/livecd/lib/grub/i386-pc/stage2_eltorito ${LIVECDDIR}/livecd/boot/grub/

    runcmd "Failed to make /ftp:" touch ${LIVECDDIR}/livecd/ftp:

    runcmd "Failed to copy skel to /root" cp ${LIVECDDIR}/livecd/etc/skel/.* ${LIVECDDIR}/livecd/root/

    echo "timeout   300
default   0
color light-blue/black light-cyan/blue

title Arch Hurd (hit 'e' and edit hd2 to be the device your CD/DVD is)
root (cd)
kernel /boot/gnumach root=device:hd2
module /hurd/iso9660fs.static --multiboot-command-line=\${kernel-command-line} --host-priv-port=\${host-port} --device-master-port=\${device-port} --exec-server-task=\${exec-task} -T typed \${root} \$(task-create) \$(task-resume)
module /lib/ld-2.14.so /hurd/exec \$(exec-task=task-create)

title  Memtest86+
root   (cd)
kernel /boot/memtest86+/memtest.bin
" > $LIVECDDIR/livecd/boot/grub/menu.lst

    runcmd "Failed to build ISO file." mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot -boot-load-size 4 -boot-info-table -V "Arch Hurd" -o ahurd.iso $LIVECDDIR/livecd

    showmsg "Done. ISO built as ${LIVECDDIR}/ahurd.iso."

    shownote "For official livecds, do the following:"
    shownote "    * Add documentation (installation guide & translator intro)"
    shownote "    * Run \`mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot -boot-load-size 4 -boot-info-table -V \"Arch Hurd\" -o ahurd.iso $LIVECDDIR/livecd\` to rebuild the ISO"
}

function qemu()
{
    IMAGEDIR=$1

    mkdir -p $IMAGEDIR

    ##### MAKE & MOUNT IMAGE

    showmsg "Creating image..."

    runcmd "Could not create image" qemu-img create -f raw $IMAGEDIR/ahurd.img 10G
    runcmd "Could not set up image" sudo losetup /dev/loop0 $IMAGEDIR/ahurd.img
    runcmd "Could not partition image" sudo zsh -c 'echo "mklabel msdos\nmkpart primary ext2 512B 100%\nquit\n" | parted /dev/loop0'
    sudo losetup -d /dev/loop0
    runcmd "Could not set up image" sudo losetup -o 512 /dev/loop0 $IMAGEDIR/ahurd.img

    ##### HDD INSTALL #####

    hdd /dev/loop0 /mnt qemu

    #### FINISH

    sudo losetup -d /dev/loop0
    showmsg "Done. Image built as ${IMAGEDIR}/ahurd.img."

    shownote "You will need to install GRUB yourself using a GRUB boot image."
    shownote "No configuration has been performed."
}

function hdd()
{
    PARTDEV=$1
    MNTDIR=/mnt
    PACKAGES=(base base-devel)
    PACCONF=/tmp/mkahurd-pacman.conf
    QEMU=false

    if [[ $2 != "" ]]; then
	      MNTDIR=$2
    fi

    if [[ $3 == "qemu" ]]; then
	      QEMU=true
    fi

    ##### MAKE & MOUNT FILESYSTEM

    if $QEMU; then
	      runcmd "Could not format partition" sudo mkfs.ext2 -b 4096 -I 128 -o hurd $PARTDEV 2610480
    else
	      runcmd "Could not format partition" sudo mkfs.ext2 -b 4096 -I 128 -o hurd $PARTDEV
    fi

    runcmd "Could not mount image" sudo mount $PARTDEV $MNTDIR

    #### INSTALL PACKAGES

    sudo mkdir -p $MNTDIR/var/lib/pacman/
    sudo mkdir -p $MNTDIR/var/cache/pacman/pkg/
    sudo mkdir -p $MNTDIR/var/log/

    echo "[options]
RootDir     = ${MNTDIR}/
DBPath      = ${MNTDIR}/var/lib/pacman/
CacheDir    = ${MNTDIR}/var/cache/pacman/pkg/
LogFile     = ${MNTDIR}/var/log/pacman.log
[core]
Server = http://files.archhurd.org/repo/core/" > $PACCONF

    runcmd "Could not synchronise pacman database." sudo pacman --config $PACCONF -Syy

    for pkg in $PACKAGES; do
        showmsg "Installing '$pkg'..."
        runcmd  "Could not install '$pkg'" sudo pacman --config $PACCONF -S $pkg --noconfirm
    done

    rm $PACCONF

    #### FINISH

    showmsg "Finishing off..."

    runcmd "Could not copy GRUB files" sudo cp -a $MNTDIR/lib/grub/i386-pc/* $MNTDIR/boot/grub/

    runcmd "Could not unmount partition" sudo umount $MNTDIR

    if ! $QEMU; then
	showmsg "Done. Arch Hurd installed to $PARTDEV."
	shownote "If you are booting directly from the Arch Hurd partition, you will need to install GRUB yourself."
	shownote "If you are booting from an existing GRUB installation, you will need to append the following to the GRUB configuration:
    title Arch Hurd
    root (hdX,Y)
    kernel /boot/gnumach root=device:hdX
    module /hurd/iso9660fs.static --multiboot-command-line=\${kernel-command-line} --host-priv-port=\${host-port} --device-master-port=\${device-port} --exec-server-task=\${exec-task} -T typed \${root} \$(task-create) \$(task-resume)
    module /lib/ld-2.11.90.so /hurd/exec \$(exec-task=task-create)"
	shownote "No configuration has been performed."
    fi
}

function help()
{
    echo "USAGE: mkahurd [-v] (--livecd | --qemu) /path/to/working/directory"
    echo
    echo "Options:"
    echo "    -v:       Verbose output (must be first argument)"
    echo "    --livecd: Generate a livecd"
    echo "    --qemu:   Generate a 10GB qemu image"
    echo "    --hdd:    Install to a partition. Give the path to the device node as the argument."
    echo
    echo "mkahurd is written and maintained by Michael Walker."
}

if [[ "$1" == "-v" ]]; then
    VERBOSE=/bin/true
    shift
fi

case $1 in
    "--livecd")
        livecd $2
        ;;
    "--qemu")
        qemu $2
        ;;
    "--hdd")
        hdd $2
        ;;
    "--help" | "")
        help
        ;;
    *)
        showerr "Unknown parameter '$1'"
        ;;
esac

