#!/usr/bin/env python3

# XKCD Downloader using the JSON interface

import sys, json, urllib.request, urllib.parse, urllib.error, subprocess

# Make an image of the given dimensions with any extra options
def makeImage (filename, geometry, options):
    # Assemble the command
    cmd = ["convert", "-background", "black", "-fill", "white", "-size", geometry, "-gravity", "center"]

    # Add in any extra options
    for opt in options:
        cmd.append (opt)

    # Finish making the command
    cmd.append (filename)

    # Run the command
    p = subprocess.Popen (cmd)
    p.wait ()

# Merge two images
def mergeImages (file1, file2, geometry):
    # Assemble the command
    cmd = ["composite", "-geometry", geometry, file2, file1, file1]

    # Run the command
    p = subprocess.Popen (cmd)
    p.wait ()

# Get image dimensions
def imageDimensions (filename):
    # Get the information
    p = subprocess.Popen (["identify", filename], stdout=subprocess.PIPE)
    p.wait ()
    info = p.communicate()[0].decode ("utf-8")

    # Split it up for parsing
    if " PNG " in info:
        info = info.split(" PNG ")
    elif " JPEG " in info:
        info = info.split(" JPEG ")
    else:
        raise Exception ("Unknown image type")

    info = info[1].split()
    info = info[0].split("x")

    # Get the dimensions
    width  = int (info[0])
    height = int (info[1])

    # Check they're sane
    assert width > 0
    assert height > 0

    # Return
    return (width, height)

# Delete an image
def delImage (filename):
    # Assemble the command
    cmd = ["rm", filename]

    # Run the command
    subprocess.Popen (cmd)

# Download a file
def downloadFile (source, destination):
    # Open both file
    s = urllib.request.urlopen(source)
    d = open (destination, "wb")

    # Read the source and write the destination
    d.write (s.read ())

    # Close
    d.close ()
    s.close ()

# Download a comic
def getComic (jsonurl):
    # Download the json and make a dict out of it
    f = urllib.request.urlopen(jsonurl)
    j = f.read().decode("utf-8")
    parsed = json.loads(j)
    f.close ()

    # Final filename
    cnum = str (parsed['num'])
    while len (cnum) < 3:
        cnum = "0" + cnum
    comicfile = "%s - %s.png" % (cnum, parsed['safe_title'])

    # Download comic image and get dimensions
    downloadFile (parsed['img'], "comic.png")

    try:
        (width, height) = imageDimensions ("comic.png")
    except AssertionError:
        print ("Could not read image: comic.png")
        exit  (1)

    # Make working images
    makeImage ("name.png", "%ix16" % (width), ["label:%s" % parsed['title']])
    makeImage ("alt.png",  "%ix"   % (width), ["-pointsize", "13", "caption:%s" % (parsed['alt'])])

    # Get dimensions of alt-text
    try:
        (altwidth, altheight) = imageDimensions ("alt.png")
    except AssertionError:
        print ("Could not read image: alt.png")
        exit  (1)

    # Make image
    makeImage (comicfile, "%ix%i" % (width, height + altheight + 24), ["xc:white"])
    mergeImages (comicfile, "name.png", "%ix16+0+0"   % (width))
    mergeImages (comicfile, "comic.png", "%ix%i+0+20" % (width, height))
    mergeImages (comicfile, "alt.png",   "%ix%i+0+%i" % (width, altheight, height + 24))

    # Delete working images
    delImage ("comic.png")
    delImage ("name.png")
    delImage ("alt.png")

    # Done
    print ("Done %s." % comicfile)


# Show help text
if "-h" in sys.argv:
    print ("Usage: xkcd <num1> <num2> <num3> ... <numn>")
    print ("\n\nIf no numbers are given, the latest comic will be downloaded.")
    exit  (0)

# Download all specified comics
if len (sys.argv) > 1:
    for num in sys.argv[1:]:
        getComic ("http://xkcd.com/%s/info.0.json" % num)
else:
    getComic ("http://xkcd.com/info.0.json")
