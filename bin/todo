#!/bin/zsh

flag=$1
arg=$2
todofile="$HOME/todo"

[[ "$TODOFILE" != "" ]] && todofile=$TODOFILE

function add()
{
    echo "* TODO [#B] $arg" >> $todofile
}

function delete()
{
    sed -i "${arg}d" $todofile
}

function toggle()
{
    sed -i "$arg s/^\* TODO/\* ODOT/"  $todofile
    sed -i "$arg s/^\* DONE/\* TODO/" $todofile
    sed -i "$arg s/^\* ODOT/\* DONE/"  $todofile
}

function priority()
{
    sed -i "$arg s/^\* TODO \[\#A\]/\* TODO [#D]/" $todofile
    sed -i "$arg s/^\* TODO \[\#B\]/\* TODO [#A]/" $todofile
    sed -i "$arg s/^\* TODO \[\#C\]/\* TODO [#B]/" $todofile
    sed -i "$arg s/^\* TODO \[\#D\]/\* TODO [#C]/" $todofile
}

function list()
{
    sed "${arg}!d" $todofile | grep -n -e "^\* \(TODO\|DONE\)"
}

function help()
{
    echo "USAGE: todo [flag] [arg]"
    echo
    echo "A simple todo-file manager, which manipulates todo files in a subset of the Emacs Org-mode format."
    echo
    echo "FLAGS:"
    echo "    a,  add       - Add new entry.                       arg = description."
    echo "    d,  delete    - Delete existing entries.             arg = regular expression."
    echo "    t,  toggle    - Toggle entries' todo/done state.     arg = regular expression."
    echo "    p,  priority  - Increment priority of entry.         arg = regular expression."
    echo "    c,  clear     - Clear finished entries from list."
    echo "    ls, list      - List entries.                        arg = regular expression."
    echo "    lt, listtodo  - List entries marked as to do."
    echo "    ld, listdone  - List entries marked as done."
    echo "    h,  help      - Display this text."
    echo
    echo "REGULAR EXPRESSIONS:"
    echo "    Regular expressions take the format used by \`sed\`, check \`man sed\` for more details. A few very simple examples follow:"
    echo "        x          - Act on line number x."
    echo "        /x/        - Act on lines containing the string x."
    echo "        /\(x\|y\)/ - Act on lines containing the string x or y."
    echo "        /x.*y/     - Act on lines containing the strings x and y (in that order)."
    echo
}

([[ "$flag" == "a" ]]  || [[ "$flag" == "add" ]])                         && add
([[ "$flag" == "d" ]]  || [[ "$flag" == "delete" ]])                      && delete
([[ "$flag" == "t" ]]  || [[ "$flag" == "toggle" ]])                      && toggle
([[ "$flag" == "p" ]]  || [[ "$flag" == "priority" ]])                    && priority
([[ "$flag" == "c" ]]  || [[ "$flag" == "clear" ]])                       && (arg="/\* DONE /"; delete)
([[ "$flag" == "ls" ]] || [[ "$flag" == "list" ]])                        && list
([[ "$flag" == "lt" ]] || [[ "$flag" == "listtodo" ]])                    && (arg="/\* TODO /"; list)
([[ "$flag" == "ld" ]] || [[ "$flag" == "listdone" ]])                    && (arg="/\* DONE /"; list)
([[ "$flag" == "h" ]]  || [[ "$flag" == "help" ]] || [[ "$flag" == "" ]]) && help
