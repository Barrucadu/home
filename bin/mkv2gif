#!/usr/bin/env python3

"""mkv2gif. Convert portions of Matroska videos into animated gifs.

Usage:
  mkv2gif <mkv> <gif> <duration> [-s <start>] [-r <res>] [-S <track>] [-f <fuzz>] [-v]
  mkv2gif -h | --help

Options:
  <mkv>                                 Path of the input Matroska file.
  <gif>                                 Path of the output gif file.
  <duration>                            Duration of the clip.
  -s <start>, --start <start>           Start position of the clip. [default: 00:00:00]
  -r <res>,   --resolution=<res>        Resolution of the gif. [default: 560x315]
  -S <track>, --subtitle-track=<track>  Subtitle track (if not given, no subtitles are embedded).
  -f <fuzz>,  --fuzz=<fuzz>             Fuzz factor as gif as a percentage [default: 0]
  -v,         --verbose                 Show output of commands as they run.
  -h,         --help                    Show this screen.
"""

from docopt import docopt
from tempfile import mkdtemp
import subprocess
import os
from shutil import rmtree
from shlex import quote


def run(command, quiet):
    """Run the given command.

    :param command: Command string to run.
    :param quiet:   Whether to suppress the output of the command or not.
    """

    if not quiet:
        print("$ " + command)

    subprocess.call(command,
        shell=True,
        stdout=subprocess.DEVNULL if quiet else None,
        stderr=subprocess.DEVNULL if quiet else None)

arguments = docopt(__doc__)

tmpdir = mkdtemp()

subs = os.path.join(tmpdir, "subs.ass")
clip = os.path.join(tmpdir, "clip.mp4")

if arguments['--subtitle-track']:
    print("Extracting subs...")
    run("mkvextract tracks {} {}:{}".format(
            quote(arguments['<mkv>']),
            arguments['--subtitle-track'],
            subs),
        not arguments['-v'])
else:
    subs = None

print("Extracting video clip...")
run("ffmpeg -i {} -strict -2 -sn -vcodec libx264 -ss {} -t {} {} {}".format(
        quote(arguments['<mkv>']),
        arguments['--start'],
        arguments['<duration>'],
        "-vf ass=" + subs if subs else "",
        clip),
    not arguments['-v'])

print("Extracting frames...")
run("ffmpeg -i {} -s {} {}".format(
        clip,
        arguments['-r'],
        os.path.join(tmpdir, "%05d.gif")),
    not arguments['-v'])

print("Converting to optimised gif...")
run("convert -delay 5 -loop 0 -fuzz {} -layers optimize-transparency {} {}".format(
        arguments['-f'],
        os.path.join(tmpdir, "*.gif"),
        quote(arguments['<gif>'])),
    not arguments['-v'])

rmtree(tmpdir)
