#!/bin/zsh

# getpkg - a simple wrapper around makepkg to retrieve packages from the AUR and ABS as required.

[ -f /etc/getpkg.conf ]                    && source /etc/getpkg.conf
[ -f $XDG_CONFIG_HOME/getpkg/getpkg.conf ] && source $XDG_CONFIG_HOME/getpkg/getpkg.conf

[[ ! -d $abstmp ]] && error "\$abstmp directory (currently '$abstmp') does not exist"
[[ ! -d $aurtmp ]] && error "\$aurtmp directory (currently '$aurtmp') does not exist"

function help()
{
    echo "getpkg - a simple wrapper around makepkg to build packages from the AUR and ABS"
    echo
    echo "USAGE: getpkg [package1] [package2] [package3] ..."
    echo
    echo "getpkg will decide whether to search the AUR or not by checking the output of pacman."
    echo "if a package is available in multiple repositories (eg: due to testing or community-testing"
    echo "being enabled), you will be given the choice of which repository to build from."
    echo
    echo "Maintainer: Michael Walker <mike@barrucadu.co.uk>"
}

function msg()
{
    echo ":: $1."
}

function error()
{
    echo ":: $1." 1>&2
    exit 1
}

packages=()

for arg in $*; do
    case $arg in
	"-h" | "--help") help && exit;;
	*) packages=($packages $arg);;
    esac
done

if [[ ${#packages} == 0 ]]; then
    error "No packages specified"
fi

for package in $packages; do
    pac=`pacman -Ss "^$package$" | grep "/$package"`
    repo=`echo -n $pac | sed 's/\/.*//'`
    num=`echo -n $pac | wc -l`

    if [[ $num == 0 ]]; then # AUR package
	cd $aurtmp
	wget http://aur.archlinux.org/packages/$package/$package.tar.gz

	if [[ $? == 8 ]]; then
	    error "Package not found"
	fi

	tar xzf $package.tar.gz
	rm $package.tar.gz
	cd $package

	msg "Building $package from AUR"
    else # ABS package
	if [[ $num > 1 ]]; then
	    msg "$package found in $num repositories. Select one to build"
	    echo

	    i=0
	    while [[ $i < $num ]]; do
		echo "$i) $pac[(f)$i]"
		i=$[$i + 1]
	    done

	    looping=true
	    while $looping; do
		echo -n "Enter your choice: "
		read choice

		if [[ $choice -ge 0 ]] && [[ $choice -lt $i ]]; then
		    looping=false
		    pac=$pac[(f)$choice]
		    repo=$repo[(f)$choice]
		fi
	    done
	    echo
	fi

	if [[ ! -d /var/abs/$repo/$package/ ]]; then
	   error "/var/abs/$repo/$package/ not found"
	fi

	msg "Building $package from $repo ABS"

	if [[ -d $abstmp/$package ]]; then
	    cd $abstmp/$package
	    cp -r /var/abs/$repo/$package/* .
	else
	    cd $abstmp
	    cp -r /var/abs/$repo/$package .
	    cd $package
	fi
    fi

    echo -n "Press Y to edit the PKGBUILD: "
    read choice

    if [[ "$choice" == "y" ]] || [[ "$choice" == "Y" ]]; then
	$EDITOR PKGBUILD
    fi

    msg "Using makepkg to check for missing dependencies"
    sudo makepkg -soe --asroot

    if [[ $? > 0 ]]; then
	error "Something went wrong"
    fi

    if $clean; then
	rm -r src/ pkg/
    fi

    if $clear; then
	cd ..
	rm -r $package
    fi
done