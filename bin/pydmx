#!/usr/bin/env python3

# Python script to control dmx devices. Requires the server to be up and running.

import os, sys, imp, subprocess, curses, curses.ascii, curses.wrapper

# ----- Global Variables ----- #
datapath   = None
data       = None
dbodata    = {}
chandata   = {}
activename = ''

# ----- Function Definitions ----- #
def dmxcmd(channel, value=None, name=None, holding=False):
    global activename
    global chandata

    if name == None:
        name = activename

    argvector = []
    if value == None:
        argvector = ["k8062", str(channel)]
    else:
        chandata[name][channel][0] = int(value)
        channel += chandata[name]['info']['startchan']
        argvector = ["k8062", str(channel), str(value)]

    if not holding:
        process = subprocess.Popen(argvector, stdout=subprocess.PIPE)
        output  = process.communicate()

    if value == None:
        try:
            return int(output[0])
        except ValueError:
            print("Dmxd does not seem to be running.")
            sys.exit()

def loaddmx(name):
    global chandata

    loaded = False
    for chan in chandata[name].keys():
        if not chan == 'info':
            newval = dmxcmd(chan + chandata[name]['info']['startchan'])
            if not chandata[name][chan][0] == newval:
                chandata[name][chan][0] = newval
                loaded = True

    return loaded

def applyheldchanges():
    global activename
    global chandata

    for channel in chandata[activename].keys():
        if not channel == 'info':
            dmxcmd(channel, chandata[activename][0])

def dbo():
    global activename
    global chandata
    global dbodata

    if not dbodata = {}:
        for channel in dbodata.keys():
            dmxcmd(channel, dbodata[channel])
        dbodata = {}
    else:
        for channel in chandata[activename].keys():
            if not channel == 'info':
                dbodata.update({channel : chandata[activename][0]})
                dmxcmd(channel, 0)

def nameinit(newname, newmodel, newstartchan):
    global chandata
    global data

    datafile = datapath + "/pydmx/" + newmodel + ".py"
    
    try:
        data = imp.load_source(newmodel, datafile)
    except IOError:
        print("The datafile " + datapath + " does not exist.")

    chandata.update({newname : {'info' : {'model'     : newmodel,
                                          'startchan' : int(newstartchan)}}})
    for i in data.dmx.keys():
        for j in data.dmx[i].keys():
            key = data.dmx[i][j][1]
            var = [data.dmx[i][j][0], data.dmx[i][j][2]]
            
            if len(data.dmx[i][j]) > 3:
                var.append(data.dmx[i][j][3])
        
            if key in chandata[newname].keys():
                chandata[newname][key].append(var)
            else:
                chandata[newname].update({key : [0, var]})

    dontload = loaddmx(newname)

    if not dontload:
        for channel in range(0, len(data.defaults)):
            dmxcmd(channel, data.defaults[channel], newname)
             

def updateui(stdscr, active, holding):
    global chandata
    global activename
    global data

    channels = chandata[activename]

    stdscr.erase()

    numbars       = len(channels) - 1
    height, width = stdscr.getmaxyx()
    barsize       = int((width - 12) / numbars)
    barheight     = height - 15
    barwidth      = 2

    stdscr.move(1, 1)
    if holding:
        if dbo:
            stdscr.addstr("[Holding/DBO]", curses.color_pair(4) and curses.A_BLINK and curses.A_BOLD)
        else:
            stdscr.addstr("[Holding]", curses.color_pair(4) and curses.A_BLINK and curses.A_BOLD)            
    elif dbo:
        stdscr.addstr("[DBO]", curses.color_pair(4) and curses.A_BLINK and curses.A_BOLD)

    stdscr.move(height - 3, 1)
    stdscr.addstr("Name:   ", curses.color_pair(5) and curses.A_BOLD)
    stdscr.addstr(activename)
    
    stdscr.move(height - 2, 1)
    stdscr.addstr("Device: ", curses.color_pair(5) and curses.A_BOLD)
    stdscr.addstr(data.name)

    for i in range(0, numbars):
        channel = channels[i]
        value = channel[0]
        
        stdscr.move(5, i * barsize + 6)
        
        attr = curses.color_pair(0)
        if i == active:
            attr = curses.color_pair(4)
            
        stdscr.addstr(data.channels[i], attr)

        stdscr.move(6, i * barsize + 6)
        stdscr.addstr(str(value))

        stdscr.move(8, i * barsize + 6)
        stdscr.addch(curses.ACS_ULCORNER)
        
        for j in range(0, barwidth):
            stdscr.addch(curses.ACS_HLINE)
            
        stdscr.addch(curses.ACS_URCORNER)

        goesupto = 0
        if not value == 0:
            goesupto = int(barheight * value / 255)
        
        for j in range(1, barheight):
            stdscr.move(j + 8, i * barsize + 6)
            stdscr.addch(curses.ACS_VLINE)

            y = barheight - j
            
            for k in range(0, barwidth):
                attr = curses.color_pair(0)
                
                if y <= goesupto:
                    if y >= 2 * barheight / 3:
                        attr = curses.color_pair(1)
                    elif y >= barheight / 3:
                        attr = curses.color_pair(2)
                    else:
                        attr = curses.color_pair(3)
                    
                stdscr.addch(" ", attr)
                
            stdscr.addch(curses.ACS_VLINE)

        stdscr.move(8 + barheight, i * barsize + 6)
        stdscr.addch(curses.ACS_LLCORNER)
        
        for j in range(0, barwidth):
            stdscr.addch(curses.ACS_HLINE)
            
        stdscr.addch(curses.ACS_LRCORNER)
        
        stdscr.move(10 + barheight, i * barsize + 6)
        stdscr.addstr(str(i + chandata[activename]['info']['startchan']))

        if active == i:
            stdscr.move(height - 1, 1)
            stdscr.addstr("State:  ", curses.color_pair(5) and curses.A_BOLD)

            highest = None
            for chan in channel:
                if type(chan) is list:
                    if chan[0] <= value and (highest == None or chan[0] > highest[0]):
                        highest = chan

            stdscr.addstr(highest[1])
        

def cursesui(stdscr):
    global chandata
    global activename
    
    curses.curs_set(0)

    activechan = 0
    holding    = False
    
    curses.init_pair(1, curses.COLOR_RED,   curses.COLOR_RED)
    curses.init_pair(2, curses.COLOR_BLUE,  curses.COLOR_BLUE)
    curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_GREEN)
    curses.init_pair(4, curses.COLOR_RED,   curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_CYAN,  curses.COLOR_BLACK)

    while True:
        updateui(stdscr, activechan, holding)
        
        ch     = stdscr.getch()
        newval = -1
        
        if ch == ord('q'):
            break
        
        elif ch == ord('r'):
            loaddmx(activename)

        elif ch == ord('h'):
            if holding:
                holding = False
                applyheldchanges()
            else:
                holding = True

        elif ch == ord('d'):
            dbo()

        elif ch == curses.KEY_LEFT:
            if not activechan == 0:
                activechan -= 1
                
        elif ch == curses.KEY_RIGHT:
            if not activechan == len(chandata[activename]) - 1:
                activechan += 1
                
        elif ch in [curses.KEY_UP, curses.KEY_PPAGE, ord('n')]:
            for cmd in chandata[activename][activechan]:
                if type(cmd) is list:
                    newdata = chandata[activename][activechan][0] + 1
                    if ch == curses.KEY_PPAGE:
                        newdata += 9

                    if 0 <= newdata <= 255 and not ch == ord('n'):
                        newval = newdata
                    elif cmd[0] > chandata[activename][activechan][0]:
                        if cmd[0] < newval or newval == -1:
                            newval = cmd[0]
                            
        elif ch in [curses.KEY_DOWN, curses.KEY_NPAGE, ord('p')]:
            for cmd in chandata[activename][activechan]:
                if type(cmd) is list:
                    newdata = chandata[activename][activechan][0] - 1
                    if ch == curses.KEY_NPAGE:
                        newdata -= 9

                    if 0 <= newdata <= 255 and not ch == ord('p'):
                        newval = newdata
                    elif cmd[0] < chandata[activename][activechan][0]:
                        if cmd[0] > newval or newval == -1:
                            newval = cmd[0]
                            
        elif ch == ord('t'):
            newval = 255
            
        elif ch == ord('b'):
            newval = 0
            
        if not newval == -1:
            dmxcmd(activechan, newval, None ,holding)
    
    curses.curs_set(1)

def listcmds(arg):
    global data
    
    print("Commands for " + data.name + ":")
    for i in data.dmx.keys():
        if arg == "" or arg == i:
            commands = []
            longest  = 0
            
            for j in data.dmx[i].keys():
                cmd = "'" + j + " [" + str(data.dmx[i][j][0]) + "+]'"
                    
                commands.append([cmd, data.dmx[i][j][2]])
                
                if len(cmd) > longest:
                    longest = len(cmd)

            print(i)
            for cmd in commands:
                spacing = longest - len(cmd[0])
                print("    " + cmd[0], cmd[1].rjust(len(cmd[1]) + spacing))
            print()
            
def parsecmd(command, arg, arg2, arg3):
    global data
    global chandata
    global activename
    
    funbreak = False

    if command == "list":
        listcmds(arg)
    elif command == "curses":
        curses.wrapper(cursesui)
    elif command == "names":
        for name in chandata.keys():
            if name == activename:
                print(name, "[active]")
            else:
                print(name)
                
            print("    Model:", chandata[name]['info']['model'])
            print("    Start:", chandata[name]['info']['startchan'])
            
    elif command == "new":
        if arg == "" or arg2 == "" or arg3 == "":
            print("Usage: new [name] [model] [startchannel]")
        else:
            nameinit(arg, arg2, arg3)

    elif command == "change":
        if not arg == "" and arg in chandata.keys():
            activename = arg
        else:
            print("Usage: change [name]")

    elif command == "reload":
        loaddmx(activename)
        
    elif command == "rename":
        if arg in chandata.keys() and not (arg2 in chandata.keys() or arg2 == ""):
            chandata.update({arg2 : chandata[arg]})
            chandata.pop(arg)
        else:
            print("Usage: rename [old] [new]")

    elif command == "dbo":
        dbo()

    elif command == "help":
        print("Usage: pydmx (help | [model] [startchannel])")
        print("The model and startchannel are optional, if not specified use the new command.")
        print("PyDMX also accepts commands from stdin, just make sure you end with an exit command to avoid an error message.\n")
        print("Internal commands:")
        print("    new [name] [model] [startchannel] - initialise a new named device.")
        print("    names                             - list all devices.")
        print("    change [name]                     - change to a different named device.")
        print("    rename [old] [new]                - change the name of a device. If the active device is renamed, a change command must immediately follow.")
        print("    reload                            - reload cached DMX values for the current device from dmxd.")
        print("    curses                            - start the ncurses interface.")
        print("    list (arg)                        - list all commands for the current device provided by the data file. If arg is specified, restrict to that category.")
        print("    dbo                               - Toggle dead black out.")
        print("    help                              - display this text")
        print("    exit                              - close pydmx\n")
        print("Curses UI:")
        print("    Up        - Increment the value of the current channel.")
        print("    Down      - Decrement the value of the current channel.")
        print("    Left      - Change to the previous channel.")
        print("    Right     - Change to the next channel.")
        print("    Page Up   - Increment the value of the current channel by 10.")
        print("    Page Down - Decrement the value of the current channel by 10.")
        print("    n         - Change to the next discrete region for that channel.")
        print("    p         - Change to the previous discrete region for that channel.")
        print("    t         - Change the value of the channel to 255.")
        print("    b         - Change the value of the channel to 0.")
        print("    h         - Toggle hold mode. Any changes made in hold more are applied when hold mode is disabled.")
        print("    d         - Equivalent of dbo command.")
        print("    r         - Equivalent of reload command.")
        print("    q         - Close the interface.\n")
        print("PyDMX requires that dmxd be running as root, and that k8062 be executable and in your $PATH.")
        print("PyDMX is developed and maintained by Barrucadu (Michael Walker).")
        
    else:
        try:
            cmd = data.dmx[command][arg]
        except KeyError:
            print("Command not found")
            funbreak = True
            
        if not funbreak:
            value = 0
            try:
                value = int(arg2)
            except ValueError:
                value = cmd[0]
                
            dmxcmd(cmd[1], value)

def parsepromptline(line):
    bar      = line.split()
    command  = ""
    arg      = ""
    arg2     = ""
    arg3     = ""
    funbreak = False

    try:
        command = bar[0]
        
        if len(bar) > 1:
            arg = bar[1]
            
        if len(bar) > 2:
            arg2 = bar[2]

        if len(bar) > 3:
            arg3 = bar[3]
    except IndexError:
        funbreak = True

    return command, arg, arg2, arg3, funbreak


def enterprompt():
    funbreak = False

    foo = input("> ")
    
    if foo == "exit": 
        return False
    else:
        command, arg, arg2, arg3, funbreak = parsepromptline(foo)
        if not funbreak:
            parsecmd(command, arg, arg2, arg3)
    return True

# ----- Main ----- #
datapath = os.getenv("XDG_DATA_HOME")
if datapath == "":
    datapath = os.getenv("HOME") + "/.local/share"

if "help" in sys.argv or "-h" in sys.argv or "--help" in sys.argv:
    parsecmd("help", None, None, None)
    sys.exit(0)
else:
    if len(sys.argv) > 2:
        model = sys.argv[1]
        startchan = int(sys.argv[2])
        nameinit('start', model, startchan)
        activename = 'start'
        
looping = True

while looping:
    looping = enterprompt()

print("Exiting...")
sys.exit(0)
