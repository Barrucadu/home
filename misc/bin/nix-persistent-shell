#!/usr/bin/env bash

# constants
NIX_ENV_DIR=$HOME/.nixpkgs/environments
GC_ROOT_DIR=$NIX_ENV_DIR/.gcroots

# arguments
env=""
rebuild=false
delete=false

# sanity check to avoid confusion
if [[ "$NIX_PERSISTENT_ENV" != "" ]]; then
  echo "shells should be nested with care, unset \$NIX_PERSISTENT_ENV to force" >&2
  exit 1
fi

function show_help {
  echo "usage: nix-persistent-shell [-d | --delete] [-r | --rebuild] <environment>"
  echo ""
  echo "  -d | --delete    delete generated .nix file and gc roots."
  echo "  -r | --rebuild   rebuild generated .nix file."
}

function nix_shell {
  local nixfile=$1
  local gcrootdir=$2

  nix-shell "$nixfile" --indirect --add-root "$gcrootdir/gc" --command "NIX_PERSISTENT_ENV=$env zsh"
}

for arg in "$@"; do
  case $arg in
    -h | -H | --help)
      show_help
      exit 0;;
    -d | --delete)
      delete=true
      shift;;
    -r | --rebuild)
      rebuild=true
      shift;;
    *)
      env=$arg
      shift;;
  esac
done

if [[ "$env" == "" ]]; then
  show_help
  exit 1
fi

# delete generated nix file and gc roots
if $delete; then
  if [[ -e "$NIX_ENV_DIR/$env.gen.nix" ]]; then
    rm "$NIX_ENV_DIR/$env.gen.nix"
  fi
  if [[ -d "$GC_ROOT_DIR/$env" ]]; then
    rm -r "$GC_ROOT_DIR/$env"
  else
    echo "could not find $env in $GC_ROOT_DIR" >&2
    exit 1
  fi
  # if deleting, just do that; don't continue.
  exit 0
fi

# delete generated nix file
if $rebuild; then
  if [[ -e "$NIX_ENV_DIR/$env.gen.nix" ]]; then
    rm "$NIX_ENV_DIR/$env.gen.nix"
  else
    # this is not fatal
    echo "could not find $env.gen.nix in $NIX_ENV_DIR, ignoring..." >&2
  fi
fi

# generate nix file
if [[ -e "$NIX_ENV_DIR/$env.packages" ]] && [[ ! -e "$NIX_ENV_DIR/$env.gen.nix" ]]; then
    echo "with import <nixpkgs> {}; { ${ENV}Env =" > "$NIX_ENV_DIR/$env.gen.nix"
    echo "  stdenv.mkDerivation {" >> "$NIX_ENV_DIR/$env.gen.nix"
    echo "    name=\"$env-env\";" >> "$NIX_ENV_DIR/$env.gen.nix"
    echo "    buildInputs = with pkgs; [" >> "$NIX_ENV_DIR/$env.gen.nix"
    cat "$NIX_ENV_DIR/$env.packages" >> "$NIX_ENV_DIR/$env.gen.nix"
    echo "    ];" >> "$NIX_ENV_DIR/$env.gen.nix"
    echo "  };" >> "$NIX_ENV_DIR/$env.gen.nix"
    echo "}" >> "$NIX_ENV_DIR/$env.gen.nix"
fi

# launch environment
if [[ -e "$NIX_ENV_DIR/$env.nix" ]]; then
  nix_shell "$NIX_ENV_DIR/$env.nix" "$GC_ROOT_DIR/$env"
elif [[ -e "$NIX_ENV_DIR/$env.gen.nix" ]]; then
  nix_shell "$NIX_ENV_DIR/$env.gen.nix" "$GC_ROOT_DIR/$env"
else
  echo "could not find $env.packages or $env.nix in . or $NIX_ENV_DIR" >&2
  exit 1
fi
