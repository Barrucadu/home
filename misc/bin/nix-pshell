#!/usr/bin/env bash

# constants
NIX_ENV_DIR=$HOME/.nixpkgs/environments
GC_ROOT_DIR=$NIX_ENV_DIR/.gcroots

# arguments
env=""
delete=false

# sanity check to avoid confusion
if [[ "$NIX_PERSISTENT_ENV" != "" ]]; then
  echo "shells should be nested with care, unset \$NIX_PERSISTENT_ENV to force" >&2
  exit 1
fi

function show_help {
  echo "usage: nix-pshell [-d | --delete] <environment>"
  echo ""
  echo "  -d | --delete    delete gc roots."
}

function nix_shell {
  local nixfile=$1
  local gcrootdir=$2

  nix-shell "$nixfile" --indirect --add-root "$gcrootdir/gc" --command "NIX_PERSISTENT_ENV=$env PROMPT_TAG=$env zsh"
}

for arg in "$@"; do
  case $arg in
    -h | -H | --help)
      show_help
      exit 0;;
    -d | --delete)
      delete=true
      shift;;
    *)
      env=$arg
      shift;;
  esac
done

if [[ "$env" == "" ]]; then
  if [[ -e "shell.nix" ]]; then
    env=shell
    NIX_ENV_DIR=.
    GC_ROOT_DIR=.gcroots
  else
    show_help
    exit 1
  fi
fi

# delete gc roots
if $delete; then
  if [[ -d "$GC_ROOT_DIR/$env" ]]; then
    rm -r "$GC_ROOT_DIR/$env"
    exit 0
  else
    echo "could not find $env in $GC_ROOT_DIR" >&2
    exit 1
  fi
fi

# launch environment
if [[ -e "$NIX_ENV_DIR/$env.nix" ]]; then
  nix_shell "$NIX_ENV_DIR/$env.nix" "$GC_ROOT_DIR/$env"
else
  echo "could not find $env.nix in $NIX_ENV_DIR" >&2
  exit 1
fi
