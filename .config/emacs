;; -*- lisp -*-

(add-to-list 'load-path "/home/barrucadu/code/elisp/")
(add-to-list 'load-path "/home/barrucadu/.config/emacspriv/")

; Interface
(require 'color-theme)

(load "zenburn.el"             nil t t)
(load "zenburn-transparent.el" nil t t) ; to-do: make it so that loading zenburn-transparent after zenburn sets the background transparent again
                                        ; currently this simply just doesn't set the background at all, giving a transparent emacs in a transparent
                                        ; terminal.

(color-theme-initialize)

(if (string= "x" window-system)
    (color-theme-zenburn)              ; If in X
    (color-theme-zenburn-transparent)) ; If in a terminal

(menu-bar-mode         0)
(column-number-mode    t)
(display-time-mode     t)
(global-font-lock-mode 1)

(setq default-mode-line-format '("-"
				 mode-line-mule-info
				 mode-line-modified
				 mode-line-frame-identification
				 mode-line-buffer-identification
				 "  "
				 global-mode-string
				 "   %[(" mode-name mode-line-process minor-mode-alist "%n"")%]--"
				 (line-number-mode "L%l--")
				 (column-number-mode "C%c--")
				 (-3 . "%p")
				 "-%-"))

; UTF-8
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(prefer-coding-system       'utf-8)

; LaTeX
(load "phrases.el"       nil t t)
(load "latex.el"         nil t t)
(load "auctex.el"        nil t t)
(load "preview-latex.el" nil t t)

(require 'tex-site)

(setq TeX-auto-save                    t
      TeX-parse-self                   t
      TeX-electric-sub-and-superscript 1
      preview-scale-function           1.33)

(add-hook 'LaTeX-mode-hook                'flyspell-mode)
(add-hook 'LaTeX-mode-hook                'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook                'TeX-fold-mode)

; Python
(require 'pycomplete)
(require 'pymacs)

(autoload 'python-mode  "python-mode"  "Python editing mode."                                       t)
(autoload 'jython-mode  "python-mode"  "Python editing mode."                                       t)
(autoload 'py-shell     "python-mode"  "Start an interactive Python interpreter in another window." t)
(autoload 'doctest-mode "doctest-mode" "Editing mode for Python Doctest examples."                  t)
(autoload 'py-complete  "pycomplete"   "Complete a symbol at point using Pymacs."                   t)

(add-to-list 'auto-mode-alist '("\\.py$"      . python-mode))
(add-to-list 'auto-mode-alist '("\\.doctest$" . doctest-mode))

(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(add-to-list 'interpreter-mode-alist '("jython" . jython-mode))

(autoload 'pymacs-load  "pymacs" nil t)
(autoload 'pymacs-eval  "pymacs" nil t)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call  "pymacs")

; Web development
(load "phpxhtml.el" nil t t)
(autoload 'php-mode "php-mode.el" "PHP Mode." t)

(setq auto-mode-alist (append '(("/*..php$" . php-mode)
                                ("/*..inc$" . php-mode)
                                ("/*..rdf$" . xml-mode)
                                ("/*..xsl$" . xml-mode))
                              auto-mode-alist))

; C
(setq c-default-style "bsd"
      c-basic-offset  4)

; Pascal (ew)
(defun pascal-compile () 
  "Compile a Pascal source file."
  (interactive)
  (save-excursion
	(let ((cb (current-buffer)))
	  (set-buffer (get-buffer-create "*TEMP*"))
	  (call-process "fpc" nil nil nil (buffer-file-name cb)))))

; Org-mode
(setq org-return-follows-link t
      org-log-done            'time
      org-agenda-files (list "~/org/home.org"
			     "~/org/school.org"
			     "~/org/misc.org"))

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

(setq auto-mode-alist (append '(("/*..org$"        . org-mode)
                                ("/*..todo$"       . org-mode))
                              auto-mode-alist))

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

; Identi.ca
(require 'identica-mode)
(load "identica-credentials.el" nil t t)

; Miscellanious
(require 'setnu+)
(require 'w3m-load)
(require 'ffap)

(autoload 'pkgbuild-mode  "pkgbuild-mode.el" "PKGBUILD Mode."     t)
(autoload 'hide-mode-line "hide-mode-line"                    nil t)

(setq-default indent-tabs-mode nil)
(setq ispell-program-name  "aspell"
      indent-tabs-mode      nil
      make-backup-files     nil
      kill-whole-line       t
      inhibit-splash-screen t
      ffap-require-prefix   t
      ffap-url-fetcher      'w3m-browse-url)

(setq auto-mode-alist (append '(("/PKGBUILD$"      . pkgbuild-mode)
                                ("/*..py$"         . python-mode)
                                ("/*..tex$"        . LaTeX-mode)
                                ("/*..sh$"         . shell-script-mode)
                                ("/*..red$"        . asm-mode))
                              auto-mode-alist))

(show-paren-mode 1)
(set-face-foreground 'show-paren-match-face "#bc8383")

; Functions
(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer)))

(defalias 'yes-or-no-p 'y-or-n-p)

; Key Bindings
(ffap-bindings)

(global-set-key [?\C-n]       'setnu-mode)
(global-set-key [?\C-x ?n]    'setnu-mode)
(global-set-key [?\C-x ?t]    'toggle-truncate-lines)
(global-set-key [?\C-x ?w]    'delete-horizontal-space)
(global-set-key [?\C-x ?W]    'delete-trailing-whitespace)
(global-set-key [?\C-x ?@]    'w3m)
(global-set-key [?\C-x ?g]    'goto-line)
(global-set-key [?\C-x ?i]    'indent-according-to-mode)
(global-set-key [?\C-x ?\C-u] 'undo)
(global-set-key [?\C-x ?m]    'hide-mode-line)
(global-set-key [?\C-x ?\C-m] 'hide-mode-line)
(global-set-key [?\M-O ?a]    'backward-paragraph)
(global-set-key [?\M-O ?b]    'forward-paragraph)
(global-set-key [?\M-O ?c]    'forward-word)
(global-set-key [?\M-O ?d]    'backward-word)
(global-set-key [?\M-[ ?3 ?^] 'backward-kill-word)
(global-set-key [?\C-x ?\C-x] 'switch-to-previous-buffer)
(global-set-key [?\C-q]       'search-forward)
(global-set-key [?\C-Z]        nil)
