## -*- shell-script -*-

##### Colours

# Framebuffer zenburn colours
if [ "$TERM" = "linux" ]; then
    echo -en "\e]P01C1C20"
    echo -en "\e]P84d4d4d"
    echo -en "\e]P1CE5C00"
    echo -en "\e]P9F57900"
    echo -en "\e]P2B7CE42"
    echo -en "\e]PABDE077"
    echo -en "\e]P3B88B10"
    echo -en "\e]PBFFC135"
    echo -en "\e]P466AABB"
    echo -en "\e]PCAACCBB"
    echo -en "\e]P5B7416E"
    echo -en "\e]PDBB4466"
    echo -en "\e]P65E7175"
    echo -en "\e]PEA3BABF"
    echo -en "\e]P7D6D8D9"
    echo -en "\e]PF6C887A"
    clear
fi

# Terminal colours
autoload colors zsh/terminfo
colors

colnames=(black red green yellow blue magenta cyan white)
for color in $colnames; do
	eval f$color='%{$fg[${color}]%}'
	eval fb$color='%{$terminfo[bold]$fg[${color}]%}'
	eval b$color='%{$bg[${color}]%}'
done

foregrounds=($fblack $fred $fgreen $fyellow $fblue $fmagenta $fcyan $fwhite
             $fbblack $fbred $fbgreen $fbyellow $fbblue $fbmagenta $fbcyan $fbwhite)
backgrounds=($bblack $bred $bgreen $byellow $bblue $bmagenta $bcyan $bwhite)

default="%{$terminfo[sgr0]%}"

##### History
export HISTFILE=${XDG_DATA_HOME:-~/.local/share}/zsh/history
export HISTSIZE=1000
export SAVEHIST=1000
export DIRSTACKSIZE=16

setopt hist_ignore_dups
setopt hist_no_functions
setopt hist_reduce_blanks
setopt hist_verify
setopt share_history

##### Prompt

function _static_ps1() {
    # User
    local usercolour=`[ $UID != 0 ] && echo $fbgreen || echo $fred`
    local prompt_user="${usercolour}${USER}${default}"

    # Host
    local chash=0
    for letter in $HOST; do
        ((chash += #letter))
    done
    local hostcolour=$foregrounds[$(( $chash % $#foregrounds ))]
    local prompt_host="${hostcolour}${HOST}${default}"

    echo "${prompt_user} on ${prompt_host}"
}
static_ps1=$(_static_ps1)

function prompt_git_dirty() {
    local gitstat="`git status 2>/dev/null`"
    
    if [[ $(echo ${gitstat} | grep -c "^Changes to be committed:$") > 0 ]]; then
        echo -n $fyellow
    elif [[ $(echo ${gitstat} | grep -c "^\(Untracked files:\|Changed but not updated:\)$") > 0 ]]; then
        echo -n $fred
    elif [[ $(echo ${gitstat} | grep "^Your branch is behind") ]]; then
        echo -n $fmagenta
    elif [[ $(echo ${gitstat} | grep "^Your branch is ahead") ]]; then
        echo -n $fmagenta
    else
        echo -n $fgreen
    fi
}

function prompt_current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return 1
    echo ${ref#refs/heads/}
}

function precmd() # Uses: setting user/root PROMPT1 variable and rehashing commands list
{
    # Last command status
    local cmdstatus=$?
    local sadface=`[ "$cmdstatus" != "0" ] && echo "${fred}:(${default} "`

    # Colours
    local usrcolour=`[ $UID != 0 ]    && echo $fbblue || echo $fbred`
    local dircolour=`[ -w "\`pwd\`" ] && echo $fbcyan || echo $fbred`

    # Git branch
    local git="[branch: `prompt_git_dirty``prompt_current_branch`${default}] "

    export PS1="${static_ps1} `prompt_current_branch &>/dev/null && echo -n $git`${sadface}${usrcolour}>>>${default}  "
    export RPROMPT="${dircolour}%~${default}"
}

export PS2="${fblue}%B%_%b >${default} "
export PS3="${fyellow}%Bselect%b:${default} "

##### Command-not-found

function command_not_found_handler() {
  if [[ -e $1 ]] && [[ -z $2 ]]; then
    if file $1 | grep ' text$' >/dev/null; then
      $EDITOR $1
    else
      file $1
    fi
  else
    echo "Command not found: $*" >&2
  fi
}

##### Keybindings
bindkey "\e[1~"  beginning-of-line
bindkey "\e[4~"  end-of-line
bindkey "\e[5~"  beginning-of-history
bindkey "\e[6~"  end-of-history
bindkey "\e[3~"  delete-char
bindkey "\e[2~"  quoted-insert
bindkey "\e[5C"  forward-word
bindkey "\eOc"   emacs-forward-word
bindkey "\e[5D"  backward-word
bindkey "\eOd"   emacs-backward-word
bindkey "\e\e[C" forward-word
bindkey "\e\e[D" backward-word
bindkey "^H"     backward-delete-word
bindkey "\e[8~"  end-of-line
bindkey "\e[7~"  beginning-of-line
bindkey "\eOH"   beginning-of-line
bindkey "\eOF"   end-of-line
bindkey "\e[H"   beginning-of-line
bindkey "\e[F"   end-of-line
bindkey '^i'     expand-or-complete-prefix

##### Colourful directory listings
eval `dircolors -b`

##### Tab completion
zle -C complete-file complete-word _generic

zstyle ':completion:*'                 completer _complete _match _approximate
zstyle ':completion:*:match:*'         original only
zstyle ':completion:*:approximate:*'   max-errors 1 numeric
zstyle ':completion:*:*'               original only
zstyle ':completion:complete-file::::' completer _files
zstyle ':completion:*'                 completer _complete _ignored _files

autoload -Uz compinit
compinit

setopt menu_complete
setopt hash_list_all

##### Directory navigation
setopt auto_cd
setopt auto_pushd
setopt pushd_silent
setopt pushd_to_home
setopt chase_links

##### Globbing
setopt extended_glob
setopt glob_dots
setopt mark_dirs
setopt multibyte
setopt null_glob

##### Misc
setopt interactive_comments
setopt correct
