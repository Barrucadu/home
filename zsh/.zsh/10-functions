## -*- shell-script -*-

# Set the prompt tag.
function ptag(){
  PROMPT_TAG=$1
}

# Unset the prompt tag.
function puntag(){
  PROMPT_TAG=""
}

# Push to the prompt tag
function ptag_push(){
  if [[ -z $PROMPT_TAG ]]; then
    PROMPT_TAG=$1
  else
    PROMPT_TAG=$PROMPT_TAG/$1
  fi
}

# Pop from the prompt tag.
function ptag_pop(){
  PROMPT_TAG=$(dirname $PROMPT_TAG)
  if [[ "$PROMPT_TAG" == "." ]]; then
    PROMPT_TAG=""
  fi
}

# Display information about the state of the world.
function status(){
  clear

  # Display a fortune
  if has fortune; then
    fortune | sed "s:^:>  :"
  fi

  # This month's budget
  echo "\n$(date +%B) Budget:"
  if $IS_GNULINUX; then
    local nextm=$(date --date=+1month +"%Y-%m-01")
  else
    local nextm=$(date -v+1m +"%Y-%m-01")
  fi
  hledger balance -N -B -H --end=$nextm --tree goal month saved | sed -e 1d -e 2d -e 3d -e 4d | sed 's:^          ::' | sed 's:          :  :'

  echo
}

# Run and disown a program
function r()
{
    $* &>/dev/null &
    disown %%
}

# Run and disown a program, then terminate the shell
function re()
{
    $* &>/dev/null &
    disown %%
    exit
}

# List a directory, restricting by some regex, and tabulate the result.
function lsby() {
    local regex=$1
    shift
    ls $* | grep $regex | column -c $(tput cols)
}

# Check if a command exists, can be a binary in PATH or a shell
# alias/function.
function has() {
  type $1 &>/dev/null
}

# Short alias for stack, with abbreviated subcommands.
if has stack; then
  function s() {
    local command=$1

    typeset -A subcommands
    local subcommands=(b build c clean e exec eg "exec ghci" g ghci i install r runghc t test)

    if [[ $command == "-h" ]] || [[ $command == "--help" ]]; then
      echo "Usage: s <command or alias> <args>"
      echo "Shorthand for 'stack'\n"
      echo "Aliases:"
      for k in "${(@ko)subcommands}"; do
        echo "    ${(r:2:: :)${k}} -> $subcommands[$k]"
      done
      echo "\nFor stack help, see 'stack --help' (or just 's')"
    else
      shift 2>/dev/null
      stack ${=subcommands[$command]:-$command} $*
    fi
  }
fi

# Fetch many git repositories
function git-fetchall() {
  for d in *; do
    if [[ -e $d/.git ]]; then
      pushd $d
      echo $d
      git fetch --prune --all
      git gc --auto --aggressive --prune
      popd
    fi
  done
}

# Recent git history, across repositories
function git-history() {
  local since=$1
  for d in *; do
    if [[ -e $d/.git ]]; then
      pushd $d;
      local repo=$(printf '%-16s' "$d")
      git log --since=$since --pretty=format:"${repo:0:16} %ai (%h):  %s" --author='Michael Walker' --all
      popd
    fi
  done
}

# Make a directory and cd to it
function mkd() {
  local target=$1
  mkdir -p $target && cd $target
}

### The nix command-line interface is awful
if has nix; then
  function with() {
    if [[ -z $WITH ]]; then
      NEW_WITH=$@
    else
      NEW_WITH=$WITH/$@
    fi
    ptag_push "with"
    PROMPT_TAG=$PROMPT_TAG WITH=$NEW_WITH nix run $@ -c zsh
    ptag_pop
  }
fi

### I can never remember the argument order for ssh stuff.

# Forward a port on a remote machine to the same local port.
function sshfwd() {
  ssh -NL ${2}:localhost:$2 $1
}

# Set up a SOCKS proxy to a remote machine.
function knit() {
  ssh -ND $2 $1
}
