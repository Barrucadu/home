## -*- shell-script -*-

# Run and disown a program
function r()
{
    $* &>/dev/null &
    disown %%
}

# Run and disown a program, then terminate the shell
function re()
{
    $* &>/dev/null &
    disown %%
    exit
}

# Run a program with the grp environment
function grprun() {
    local GRPDIR=${GRPDIR:-/tmp/hacksoc-grp}

    PATH=$GRPDIR/bin:$PATH \
    LD_LIBRARY_PATH=$GRPDIR/lib:$LD_LIBRARY_PATH \
    PYTHONPATH=$GRPDIR/lib/python3.3/site-packages:$PYTHONPATH \
    $*
}

# List a directory, restricting by some regex, and tabulate the result.
function lsby() {
    local regex=$1
    shift
    ls $* | grep $regex | column -c `tput cols`
}

# Short alias for stack, with abbreviated subcommands.
function s() {
  local command=$1
  shift

  case "$command" in
    b) stack build   $* ;;
    B) stack bench   $* ;;
    c) stack clean   $* ;;
    e) stack exec    $* ;;
    g) stack ghci    $* ;;
    i) stack install $* ;;
    t) stack test    $* ;;
    "-h" | "--help")
      echo "s: shorthand for 'stack"
      echo "USAGE: s <command or alias> <args>\n"
      echo "Aliases:\n"
      echo "    b: build"
      echo "    B: bench"
      echo "    c: clean"
      echo "    e: exec"
      echo "    g: ghci"
      echo "    i: install"
      echo "    t: test\n"
      echo "For stack help, see 'stack --help'"
      ;;
    *) stack $command $* ;;
  esac
}

### Predicates

# Check if a command exists, can be a binary in PATH or a shell
# alias/function.
function has() {
  type $1 &>/dev/null
}

# Check if a string is a hostname we can ssh into.
function is_host() {
  grep "^Host $1$" ~/.ssh/config &>/dev/null || ping -c1 $1 &>/dev/null
}

# Check if a host supports mosh connections.
function use_mosh() {
  grep "^$1$" ~/.ssh/use_mosh &>/dev/null
}

### Smarter versions of regular commands

# A smarter `less`: doesn't start the pager unles the output is too
# long for the terminal.
function smartless() {
  local out="`$* 2>&1`"
  local outlines="`echo $out | wc -l`"
  local termlines="`tput lines`"

  if [[ $outlines -gt $termlines ]]; then
    echo $out | less
  else
    echo $out
  fi
}

# A smarter `mosh`/`ssh`: connects using `mosh` if installed and the
# target supports it (see ~/.ssh/use_mosh)
function smartmosh() {
  if use_mosh $1 && has mosh; then
    mosh $1
  else
    ssh $1
  fi
}
