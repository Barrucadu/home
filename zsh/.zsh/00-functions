## -*- shell-script -*-

# Run and disown a program
function r()
{
    $* &>/dev/null &
    disown %%
}

# Run and disown a program, then terminate the shell
function re()
{
    $* &>/dev/null &
    disown %%
    exit
}

# Run a program with the grp environment
function grprun() {
    local GRPDIR=${GRPDIR:-/tmp/hacksoc-grp}

    PATH=$GRPDIR/bin:$PATH \
    LD_LIBRARY_PATH=$GRPDIR/lib:$LD_LIBRARY_PATH \
    PYTHONPATH=$GRPDIR/lib/python3.3/site-packages:$PYTHONPATH \
    $*
}

# List a directory, restricting by some regex, and tabulate the result.
function lsby() {
    local regex=$1
    shift
    ls $* | grep $regex | column -c `tput cols`
}

# Short alias for stack, with abbreviated subcommands.
function s() {
  local command=$1

  typeset -A subcommands
  local subcommands=(b build c clean e exec eg "exec ghci" g ghci i install t test)

  if [[ $command == "-h" ]] || [[ $command == "--help" ]]; then
    echo "Usage: s <command or alias> <args>"
    echo "Shorthand for 'stack'\n"
    echo "Aliases:"
    for k in "${(@ko)subcommands}"; do
      echo "    ${(r:2:: :)${k}} -> $subcommands[$k]"
    done
    echo "\nFor stack help, see 'stack --help' (or just 's')"
  else
    shift 2>/dev/null
    stack ${=subcommands[$command]:-$command} $*
  fi
}

### Predicates

# Check if a command exists, can be a binary in PATH or a shell
# alias/function.
function has() {
  type $1 &>/dev/null
}

# Check if a string is a hostname we can ssh into.
function is_host() {
  grep "^Host $1$" ~/.ssh/config &>/dev/null || ping -c1 $1 &>/dev/null
}

# Check if a host supports mosh connections.
function use_mosh() {
  grep "^$1$" ~/.ssh/use_mosh &>/dev/null
}

### Smarter versions of regular commands

# A smarter `mosh`/`ssh`: connects using `mosh` if installed and the
# target supports it (see ~/.ssh/use_mosh)
function smartmosh() {
  if use_mosh $1 && has mosh; then
    mosh $1
  else
    ssh $1
  fi
}
