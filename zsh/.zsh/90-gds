## -*- shell-script -*-

# set up ssh config like https://github.com/alphagov/govuk-puppet/blob/master/development-vm/ssh_config

GOVUK_DIR=$HOME/govuk

function gds(){
  echo 'no gds functions'
}

if [[ -d "$GOVUK_DIR" ]]; then
  # terraform version manager, installed with homebrew
  if [[ -f /usr/local/share/chtf/chtf.sh ]]; then
    source /usr/local/share/chtf/chtf.sh
  fi

  # functions
  function gds(){
    echo 'gclasses env              - list classes'
    echo 'gnodes env [class]        - list nodes, optionally restricted by class'
    echo 'gssh env class [arg...]   - connect to an arbitrary node of that class in that environment'
    echo 'gforeach env class arg... - run the command on each node of that class in that environment'
    echo '                          - use `gforeach env "" arg...` to run on all nodes'

    if has shyaml; then
      echo
      echo '== apps'
      echo
      echo 'gclass env app            - look up the machine class an app runs on'
      echo 'goto env app [arg...]     - connect to a machine, looking up the class'
    fi

    if has crudini; then
      echo
      echo '== aws'
      echo
      echo 'gaws-assume env           - assume-role in AWS'
      echo 'gaws-run env arg...       - assume-role and run `arg...` with credentials in env vars'
      echo 'gaws-sh env               - shorthand for `gaws-run $env zsh`, also changing the prompt'
      echo 'gaws-do env arg...        - shorthand for `gaws-run $env aws arg...`'
    fi

    if has fzf; then
      echo
      echo '== fuzzy-find'
      echo
      echo 'gssh, env class [arg...]  - fuzzy-find by hostname'
    fi
  }

  function gclasses(){
    env=$1
    ssh $env "govuk_node_list --classes"
  }

  function gnodes(){
    env=$1
    class=$2
    if [[ -z $class ]]; then
      ssh $env govuk_node_list
    else
      ssh $env "govuk_node_list -c $2"
    fi
  }

  function gssh(){
    env=$1
    class=$2
    shift
    shift
    ssh $(ssh $env "govuk_node_list --single-node -c $class").$env "$@"
  }

  function gforeach(){
    env=$1
    class=$2
    shift
    shift
    for ip in $(gnodes $env $class); do
      ssh "$ip.$env" "$@"
    done
  }

  # `has` is defined in 01-functions
  if has shyaml; then
    function gclass(){
      env=$1
      app=$2

      yamlfile="$GOVUK_DIR/govuk-puppet/hieradata/common.yaml"
      if [[ "$env" == "integration" ]]; then
        yamlfile="$GOVUK_DIR/govuk-puppet/hieradata_aws/common.yaml"
      fi

      shyaml get-value node_class < $yamlfile | grep -v '^ ' | sed 's/://' | while read class; do
        if shyaml get-value "node_class.$class.apps" < $yamlfile | grep -q "^- ${app}$"; then
          echo $class
          return
        fi
      done
    }

    function goto(){
      env=$1
      app=$2
      shift
      shift
      gssh $env $(gclass $env $app) "$@"
    }
  fi

  if has crudini; then
    function gaws-assume(){
      env=$1
      profile="govuk-$env"
      aws --profile $profile sts assume-role \
          --role-arn $(crudini --get ~/.aws/config "profile $profile" role_arn) \
          --role-session-name $USER
    }

    function gaws-sh(){
      env=$1
      shift
      PROMPT_TAG="aws:$env" gaws-run $env zsh "$@"
    }

    function gaws-do(){
      env=$1
      shift
      gaws-run $env aws "$@"
    }

    function gaws-run(){
      function _get_credentials_key {
        echo $credentials | ruby -e "require 'json'; c = JSON.parse(STDIN.read)['Credentials']; STDOUT << c['$1']"
      }

      env=$1
      shift
      credentials=$(gaws-assume $env) || exit $?
      AWS_ACCESS_KEY_ID=$(_get_credentials_key AccessKeyId)         \
      AWS_SECRET_ACCESS_KEY=$(_get_credentials_key SecretAccessKey) \
      AWS_SESSION_TOKEN=$(_get_credentials_key SessionToken)        \
      AWS_EXPIRATION=$(_get_credentials_key Expiration)             \
      "$@"
    }
  fi

  if has fzf; then
    function gssh,(){
      env=$1
      class=$2
      shift
      shift
      ssh $(ssh $env "govuk_node_list -c $class" | fzf).$env "$@"
    }
  fi
fi
