## -*- shell-script -*-

# set up ssh config like https://github.com/alphagov/govuk-puppet/blob/master/development-vm/ssh_config

GOVUK_ROOT_DIR=$HOME/govuk

if [[ -d "$GOVUK_ROOT_DIR" ]]; then
  alias -g _i='integration'
  alias -g _s='staging'
  alias -g _sa='staging-aws'
  alias -g _p='production'
  alias -g _pa='production-aws'

  if [[ -d "$HOME/.rbenv/shims" ]]; then
    export PATH="$PATH:~/.rbenv/shims"
    eval "$(rbenv init - zsh)"
  fi

  if [[ -d "$GOVUK_ROOT_DIR/govuk-docker" ]]; then
    export GOVUK_DOCKER_DIR="$GOVUK_DIR/govuk-docker"
    export PATH="$PATH:$GOVUK_DOCKER_DIR/bin"
  fi

  # terraform version manager, installed with homebrew
  if [[ -f /usr/local/share/chtf/chtf.sh ]]; then
    source /usr/local/share/chtf/chtf.sh
  fi

  function govuk {
    local command=$1
    case $command in
      'a'|'aws')    shift; __govuk_aws    "$@";;
      'd'|'docker') shift; __govuk_docker "$@";;
      'r'|'remote') shift; __govuk_remote "$@";;
      *) __govuk_help;;
    esac
  }

  function __govuk_aws {
    function __govuk_aws_assume {
      local profile="govuk-$env"
      aws --profile $profile sts assume-role \
          --role-arn $(crudini --get ~/.aws/config "profile $profile" role_arn) \
          --role-session-name $USER
    }

    function __govuk_aws_get_credential_key {
      echo $credentials | ruby -e "require 'json'; c = JSON.parse(STDIN.read)['Credentials']; STDOUT << c['$1']"
    }

    local env=$1
    local command=$2
    if [[ -z $env ]] || [[ -z $command ]]; then
      __govuk_help
      return 1
    fi
    shift 2

    case $command in
      'a'|'assume')
        local credentials=$(__govuk_aws_assume) || return $?
        echo export AWS_ACCESS_KEY_ID=\'$(__govuk_aws_get_credential_key AccessKeyId)\'
        echo export AWS_SECRET_ACCESS_KEY=\'$(__govuk_aws_get_credential_key SecretAccessKey)\'
        echo export AWS_SESSION_TOKEN=\'$(__govuk_aws_get_credential_key SessionToken)\'
        echo export AWS_EXPIRATION=\'$(__govuk_aws_get_credential_key Expiration)\'
        ;;
      'e'|'exec')
        if [[ -z $1 ]]; then
          __govuk_help
          return 1
        fi
        env "$(govuk aws $env assume)" "$@"
        ;;
      's'|'sh')
        PROMPT_TAG="aws:$env" govuk aws exec zsh "$@"
        ;;
      'd'|'do')
        govuk aws exec aws "$@"
        ;;
      *)
        __govuk_help
        ;;
    esac
  }

  function __govuk_docker {
    local command=$1
    if [[ -z $command ]]; then
      __govuk_help
      return 1
    fi
    shift

    case $command in
      's'|'setup')
        if [[ -z $1 ]]; then
          __govuk_help
          return 1
        fi
        make -f "$GOVUK_DOCKER_DIR/Makefile" "$@"
        ;;
      'S'|'setup-this')
        local this=$(basename $(pwd))
        make -f "$GOVUK_DOCKER_DIR/Makefile" "$this"
        ;;
      'r'|'run')
        local app=$1
        local stack=$2
        if [[ -z $app ]]; then
          __govuk_help
          return 1
        fi
        shift
        if [[ -z $stack ]]; then
          GOVUK_DOCKER_SERVICE="$app" govuk-docker run
        else
          shift
          GOVUK_DOCKER_SERVICE="$app" govuk-docker run --stack $stack "$@"
        fi
        ;;
      'R'|'run-this')
        local stack=$1
        if [[ -z $stack ]]; then
          govuk-docker run
        else
          shift
          govuk-docker run --stack $stack "$@"
        fi
        ;;
      'c'|'compose')
        if [[ -z "$1" ]]; then
          __govuk_help
          return 1
        fi
        govuk-docker compose "$@" | tail -n+2
        ;;
      'p'|'prune')
        govuk-docker prune
        ;;
      '!'|'stop')
        govuk docker compose stop
        ;;
      '?'|'stacks')
        local pat=$1
        govuk docker compose ps --services | grep "$pat"
        ;;
      *)
        __govuk_help
        ;;
    esac
  }

  function __govuk_remote {
    local env=$1
    local command=$2
    if [[ -z $env ]] || [[ -z $command ]]; then
      __govuk_help
      return 1
    fi
    shift 2

    case $command in
      'c'|'classes')
        ssh $env "govuk_node_list --classes"
        ;;
      'n'|'nodes')
        local class=$1
        if [[ -z $class ]]; then
          ssh $env govuk_node_list
        else
          ssh $env "govuk_node_list -c $2"
        fi
        ;;
      's'|'ssh')
        local class=$1
        if [[ -z $class ]]; then
          __govuk_help
          return 1
        fi
        shift
        ssh $(ssh $env "govuk_node_list --single-node -c $class").$env "$@"
        ;;
      'f'|'foreach')
        local class=$1
        if [[ -z $class ]] || [[ -z $2 ]]; then
          __govuk_help
          return 1
        fi
        shift
        for ip in $(govuk remote nodes $env $class); do
          ssh "$ip.$env" "$@"
        done
        ;;
      *)
        __govuk_help
        ;;
    esac
  }

  function __govuk_help {
    echo 'govuk (a | aws) $env'
    echo '    (a | assume)                       - assume-role and print the credentials'
    echo '    (e | exec) $arg...                 - assume-role and run $arg... with credentials in the environment'
    echo '    (s | sh)                           - shorthand for `$env exec zsh`, and updates the prompt'
    echo '    (d | do) $arg...                   - shorthand for `$env exec aws $arg...`'
    echo
    echo 'govuk (d | docker)'
    echo '    (s | setup) $app...                - set up apps and their dependencies'
    echo '    (S | setup-this)                   - set up this app and its dependencies'
    echo '    (r | run) $app [$stack [$arg...]]  - run a stack for an app, with an optional command'
    echo '    (R | run-this) [$stack [$arg...]]  - run a stack for this app, with an optional command'
    echo '    (c | compose) $arg...              - run a docker-compose command'
    echo '    (p | prune)                        - prune stale containers, volumes, and images'
    echo '    (! | stop)                         - shorthand for `compose stop`'
    echo '    (? | stacks) [$pat]                - shorthand for `compose ps --services`, optinally grepping by a pattern'
    echo
    echo 'govuk (r | remote) $env'
    echo '    (c | classes)                      - list node classes'
    echo '    (n | nodes) [$class]               - list nodes in a class'
    echo '    (s | ssh) $class [$arg...]         - connect to an arbitrary node in a class'
    echo '    (f | foreach) $class $arg...       - run the a command on every node in a class'
  }

  # there must be a better way of doing this
  alias gk='govuk'
  alias gka='govuk aws'
  alias gkai='govuk aws integration'
  alias gkaia='govuk aws integration assume'
  alias gkaie='govuk aws integration exec'
  alias gkais='govuk aws integration sh'
  alias gkaid='govuk aws integration do'
  alias gkas='govuk aws staging'
  alias gkasa='govuk aws staging assume'
  alias gkase='govuk aws staging exec'
  alias gkass='govuk aws staging sh'
  alias gkasd='govuk aws staging do'
  alias gkap='govuk aws production'
  alias gkapa='govuk aws production assume'
  alias gkape='govuk aws production exec'
  alias gkaps='govuk aws production sh'
  alias gkapd='govuk aws production do'
  alias gkd='govuk docker'
  alias gkds='govuk docker setup'
  alias gkdS='govuk docker setup-this'
  alias gkdr='govuk docker run'
  alias gkdR='govuk docker run-this'
  alias gkdc='govuk docker compose'
  alias gkdp='govuk docker prune'
  alias 'gkd!'='govuk docker stop'
  alias 'gkd?'='govuk docker stacks'
  alias gkr='govuk remote'
  alias gkri='govuk remote integration'
  alias gkric='govuk remote integration classes'
  alias gkrin='govuk remote integration nodes'
  alias gkris='govuk remote integration ssh'
  alias gkrif='govuk remote integration foreach'
  alias gkrs='govuk remote staging'
  alias gkrsc='govuk remote staging classes'
  alias gkrsn='govuk remote staging nodes'
  alias gkrss='govuk remote staging ssh'
  alias gkrsf='govuk remote staging foreach'
  alias gkrsa='govuk remote staging-aws'
  alias gkrsac='govuk remote staging-aws classes'
  alias gkrsan='govuk remote staging-aws nodes'
  alias gkrsas='govuk remote staging-aws ssh'
  alias gkrsaf='govuk remote staging-aws foreach'
  alias gkrp='govuk remote production'
  alias gkrpc='govuk remote production classes'
  alias gkrpn='govuk remote production nodes'
  alias gkrps='govuk remote production ssh'
  alias gkrpf='govuk remote production foreach'
  alias gkrpa='govuk remote production-aws'
  alias gkrpac='govuk remote production-aws classes'
  alias gkrpan='govuk remote production-aws nodes'
  alias gkrpas='govuk remote production-aws ssh'
  alias gkrpaf='govuk remote production-aws foreach'
fi
